/*
 *  The patch class in a patching simplification
 *
 *  Author: Ht
 *  Email : waytofall916@gmail.com
 *
 *  Copyright (C) Ht-waytofall. All rights reserved.
 */


#ifndef __H_MESH_PATCH__
#define __H_MESH_PATCH__

#include <iostream>
#include <fstream>
#include <sstream>
#include "util_common.h"
#include "trivial.h"

using std::ofstream;
using std::ifstream;
using std::ostringstream;

/* a generic patch class */
class HMeshPatch {
public:
	bool openForWrite(const char* vert_name, const char* face_name);

public:
	uint vert_count;
	uint face_count;
	ofstream vert_file;
	ofstream face_file;
};


/* a patch generated by the uniform grid partitioning algorithm */
class HGridPatch: public HMeshPatch {
public:
	/*
	 * grid_index:	the tripled index of the uniform grid
	 *				concerning the patch when using a uniform
	 *				patch partitioning algorithm
	 */
	bool openForWrite(HTripleIndex<uint> grid_index);
	inline void getVertPatchName(HTripleIndex<uint> grid_index, char *buf);
	inline void getFacePatchName(HTripleIndex<uint> grid_index, char *buf);

public:
};

void HMeshPatch::getVertPatchName(HTripleIndex<uint> grid_index, char *buf) {
	
	ostringstream oss_name;
	oss_name << "vert_" << grid_index.i << "_" << grid_index.j << "_" << grid_index.k;
	stringToCstr(oss_name.str(), buf);
}

void HMeshPatch::getFacePatchName(HTripleIndex<uint> grid_index, char *buf) {

	ostringstream oss_name;
	oss_name << "face_" << grid_index.i << "_" << grid_index.j << "_" << grid_index.k;
	stringToCstr(oss_name.str(), buf);
}

#endif //__H_MESH_PATCH__